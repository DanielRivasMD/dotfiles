
#------------------------------------------------------------------------------------------------------------------------------
#
# 8888888b.
# 888   Y88b
# 888    888
# 888   d88P
# 8888888P"
# 888 T88b
# 888  T88b
# 888   T88b
#
#------------------------------------------------------------------------------------------------------------------------------


'.source.r':


# 888b    888                            8888888888                         888    d8b
# 8888b   888                            888                                888    Y8P
# 88888b  888                            888                                888
# 888Y88b 888  8888b.  88888b.   .d88b.  8888888 888  888 88888b.   .d8888b 888888 888  .d88b.  88888b.  .d8888b
# 888 Y88b888     "88b 888 "88b d88""88b 888     888  888 888 "88b d88P"    888    888 d88""88b 888 "88b 88K
# 888  Y88888 .d888888 888  888 888  888 888     888  888 888  888 888      888    888 888  888 888  888 "Y8888b.
# 888   Y8888 888  888 888  888 Y88..88P 888     Y88b 888 888  888 Y88b.    Y88b.  888 Y88..88P 888  888      X88
# 888    Y888 "Y888888 888  888  "Y88P"  888      "Y88888 888  888  "Y8888P  "Y888 888  "Y88P"  888  888  88888P'
#
#------------------------------------------------------------------------------------------------------------------------------


  'slid_win {}':
    prefix: 'slid_win(f_seq = , f_bin_size = )'
    body: 'slid_win(${1:f_seq}, ${2:f_bin_size})'


#        d8888      888                                                  888
#       d88888      888                                                  888
#      d88P888      888                                                  888
#     d88P 888  .d88888 888  888  8888b.  88888b.   .d8888b .d88b.   .d88888
#    d88P  888 d88" 888 888  888     "88b 888 "88b d88P"   d8P  Y8b d88" 888
#   d88P   888 888  888 Y88  88P .d888888 888  888 888     88888888 888  888
#  d8888888888 Y88b 888  Y8bd8P  888  888 888  888 Y88b.   Y8b.     Y88b 888
# d88P     888  "Y88888   Y88P   "Y888888 888  888  "Y8888P "Y8888   "Y88888
#
#------------------------------------------------------------------------------------------------------------------------------


  'ggplotting':
    prefix: 'ggplot'
    body: """{
    \tggplot(
    \t\tdata = $1,
    \t\taes(
    \t\t\t$2
    \t\t)
    \t) +
    \t$3
    }
    """

  'convert to tibble {tibble}':
    prefix: 'as_tibble'
    body: 'tibble::as_tibble(${1:?})'

  'tibble {tibble}':
    prefix: 'tibble()'
    body: 'tibble::tibble($1)'

  'filter {dplyr}':
    prefix: 'filter()'
    body: 'dplyr::filter($1)'

  'read_delim {readr}':
    prefix: 'read_delim'
    body: """readr::read_delim(
    \tfile = $1,
    \tdelim = $2,
    \tcol_names = $3
    )"""

  'slice {dplyr}':
    prefix: 'slice(.data, ...)'
    body: 'dplyr::slice($1)'

  'select {dplyr}':
    prefix: 'select(.data, ...)'
    body: 'dplyr::select($1)'

  'pull {dplyr}':
    prefix: 'pull(.data, ...)'
    body: 'dplyr::pull($1)'

  'mutate {dplyr}':
    prefix: 'mutate(.data, ...)'
    body: 'dplyr::mutate($1)'

  'add_column {tibble}':
    prefix: 'add_column(.data, ..., .before = NULL, .after = NULL)'
    body: 'tibble::add_column($1)'


# 888888b.
# 888  "88b
# 888  .88P
# 8888888K.   8888b.  .d8888b  888  .d8888b
# 888  "Y88b     "88b 88K      888 d88P"
# 888    888 .d888888 "Y8888b. 888 888
# 888   d88P 888  888      X88 888 Y88b.
# 8888888P"  "Y888888  88888P' 888  "Y8888P
#
#------------------------------------------------------------------------------------------------------------------------------


  'iteration through list':
    prefix: 'forls'
    body: """for ( $1 in seq_along($2) ) {
    \t#
    \twhich_$3 <- names($2)[$1]
    \t$4
    }"""

  'iteration through vector':
    prefix: 'forvc'
    body: """for ( $1 in seq_along($2) ) {
    \t#
    \twhich_$3 <- $2[$1]
    \t$4
    }"""

  'iteration through matrix or data.frame':
    prefix: 'fordf'
    body: """for ( $1 in 1:dim($2)[$3] ) {
    \t#
    \twhich_$4 <- $2[$1]
    \t$5
    }"""

  'writetable {utils}':
    prefix: 'writetable()'
    body: """write.table(
    \t$1,
    \tfile = "$2",
    \tsep = "$3",
    \tappend = ${4:FALSE},
    \tcol.names = ${5:TRUE},
    \trow.names = FALSE,
    \tquote = FALSE
    )"""

  'seq_along {base}':
    prefix: 'seq_along()'
    body: 'seq_along($1)'

  'paste0 {base}':
    prefix: 'paste0()'
    body: 'paste0($1)'

  'save {base}':
    prefix: 'save()'
    body: 'save(${1:...}, file = "$2.RData")'

  'tryCatch {base}':
    prefix: 'tryCatch()'
    body: """tryCatch(
    \texpr = {
    \t\t$1
    \t},
    \terror = function(f_err){
    \t\t$2
    \t},
    \twarning = function(f_warn){
    \t\t$3
    \t},
    \tfinally = {
    \t\t$4
    \t}
    )"""


#------------------------------------------------------------------------------------------------------------------------------


  'apply function over marigin {base}':
    prefix: 'apply()'
    body: 'apply(${1:x}, ${2:MARGIN}, ${3:FUN})'

  'apply function over a List or vector {base}':
    prefix: 'lapply()'
    body: 'lapply(${1:x}, ${2:FUN})'

  'apply function over a ragged array {base}':
    prefix: 'tapply()'
    body: 'tapply(${1:x}, ${2:FUN})'

  'combine values {base}':
    prefix: 'c()'
    body: 'c(${1:})'

  'convert to array {base}':
    prefix: 'as.array()'
    body: 'as.array(${1:?})'

  'convert to data frame {base}':
    prefix: 'as.data.frame()'
    body: 'as.data.frame(${1:x})'

  'convert to vector {base}':
    prefix: 'as.vector()'
    body: 'as.vector(${1:x})'

  'convert to numeric {base}':
    prefix: 'as.numeric()'
    body: 'as.numeric(${1:x})'

  'convert to logical {base}':
    prefix: 'as.logical()'
    body: 'as.logical(${1:?})'

  'convert to complex {base}':
    prefix: 'as.complex()'
    body: 'as.complex(${1:x})'

  'convert to character {base}':
    prefix: 'as.character()'
    body: 'as.character(${1:x})'

  'attach data {base}':
    prefix: 'attach()'
    body: 'attach(${1:data})'

  'breaks out loop {base}':
    prefix: 'break'
    body: 'break'

  'round to smallest integer {base}':
    prefix: 'ceiling()'
    body: 'ceiling(${1:x})'

  'computes the combinations  {base}':
    prefix: 'choose()'
    body: 'choose(${1:n},${2:k})'

  'correlation {base}':
    prefix: 'cor()'
    body: 'cor(${1:x})'

  'combine by columns {base}':
    prefix:'cbind()'
    body:'cbind(${1:},${2:})'

  'create data frames  {base}':
    prefix: 'data.frame()'
    body: 'data.frame($1)'

  'detach {base}':
    prefix: 'detach()'
    body: 'detach(${1:data})'

  'lagged of vector {base}':
    prefix: 'diff()'
    body: 'diff(${1:x})'

  'dimension {base}':
    prefix: 'dim()'
    body: 'dim(${1:x})'

  'show files {base}':
    prefix: 'dir()'
    body: 'dir()'

  'empirical cumu. dist. fun. {base}':
    prefix: 'ecdf()'
    body: 'ecdf(${1:x})'

  'TRUE {base}':
    prefix: 'TRUE'
    body: 'TRUE'

  'FALSE {base}':
    prefix: 'FALSE'
    body: 'FALSE'

  'round to largest integer {base}':
    prefix: 'floor()'
    body: 'floor(${1:x})'

  'for Loop {base}':
    prefix: 'for'
    body: """
    for ( ${1:i} in ${2::} ) {
    \t#
    \t$3
    }
    """

  'function {base}':
    prefix: 'function'
    body: """
    $1 <- function(

    \t${2:# ARGUMENTS}
    ) {
    \t${0:# BODY}
    \t${3:return($4)}
    }
    \t"""

  'display plot of object {Idisplay}':
    prefix: 'display()'
    body: """
    \tdisplay(${1:x})
    """

  'getwd get workDir {base}':
    prefix:'getwd'
    body:'getwd()'

  'help via dispaly {IRdispaly}':
    prefix: 'help(display())'
    body: 'help(display(${1:x}))'

  'help via {base}':
    prefix: 'help()'
    body: 'help(${1:?})'

  'hist {base}':
    prefix: 'histogram'
    body:'hist(${1:x}, freq = FALSE)'


  'intersetion of sets {base}':
    prefix: 'intersect()'
    body: 'intersect(${1:x}, ${2:y})'


  'if,else if,else {base}':
    prefix: 'ifelseifelse'
    body: """
    if ( ${1:true} ) {
    \t#
    \t$2
    } else if ( ${3:false} ) {
    \t#
    \t$4
    } else {
    \t#
    \t$5
    }
    """

  'if,else {base}':
    prefix: 'ifelse'
    body: """
    if ( ${1:true} ) {
    \t#
    \t$2
    } else {
    \t#
    \t$3
    }
    """

  'ifelse {base}':
    prefix: 'ifelse(,,)'
    body: """
    ifelse (${1:true},$2,$3)
    """

  'if [monoline] {base}':
    prefix: 'if1'
    body: 'if ( ${1:true} ) $2'

  'if [multiline] {base}':
    prefix: 'if0'
    body: """
    if ( ${1:true} ) {
    \t#
    \t$2
    }
    """

  'test for mising {base}':
    prefix: 'is.na()'
    body: 'is.na(${1:?})'

  'test for null {base}':
    prefix: 'is.null()'
    body: 'is.null(${1:x})'

  'test for array {base}':
    prefix: 'is.array()'
    body: 'is.array(${1:x})'

  'test for data frame {base}':
    prefix: 'is.data.frame()'
    body: 'is.data.frame(${1:?})'

  'test for numeric {base}':
    prefix: 'is.numeric()'
    body: 'is.numeric(${1:x})'

  'test for complex {base}':
    prefix: 'is.complex()'
    body: 'is.complex(${1:x})'

  'test for character {base}':
    prefix: 'is.character()'
    body: 'is.character(${1:x})'

  'NULL {base}':
    prefix: 'NULL'
    body: 'NULL'

  'Kolmogorov-Smirnov test {stat}':
    prefix: 'ks.test()'
    body: 'ks.test(${1:x}, ${2:y})'

  'library {base}':
    prefix: "library()"
    body: """
    library(${1:})
    """

  'length {base}':
    prefix: 'len()'
    body: 'length(${1:x})'

  'mean with trim {base}':
    prefix: 'mean()'
    body: 'mean(${1:x}, trim = 0, na.rm = FALSE)'

  'mean {base}':
    prefix: 'mean()'
    body: 'mean(${1:x})'

  'mit NA {stat}':
    prefix: 'na.omit()'
    body: 'na.omit(${0:x})'

  'number of columns {base}':
    prefix: 'ncol()'
    body: 'ncol(${1:x})'

  'number of rows {base}':
    prefix: 'nrow()'
    body: 'nrow(${1:x})'

  'option to resize plot {base}':
    prefix: 'options()'
    body: 'options(repr.plot.width = 4, repr.plot.height = 3)'

  'sample quantile {stats}':
    prefix: 'quantile()'
    body: 'quantile(${1:x}, probs = ${2})'

  'calculayte range {base}':
    prefix: 'range()'
    body: 'range(${1:x})'

  'return ranks of values {base}':
    prefix: 'rank()'
    body: 'rank(${1:x})'

  'combine by row {base}':
    prefix:'rbind()'
    body:'rbind(${1}, ${2:})'

  'read csv {utils}':
    prefix: 'read.csv()'
    body: 'read.csv(
    \t${0:x},
    \tfile = ".csv",
    sep = "",
    \theader = TRUE,
    \trow.names = TRUE,
    \tcol.names = TRUE
    )'

  'read table {utils}':
    prefix: 'read.table()'
    body: 'read.table(
    \t${0:x},
    \tfile = ".csv",
    sep = "",
    \theader = TRUE,
    \trow.names = TRUE,
    \tcol.names = TRUE
    )'

  'read delim {utils}':
    prefix: 'read.delim()'
    body: 'read.delim(
    \t${1:x},
    \tfile = ".csv",
    \tsep = "",
    \theader = TRUE,
    \trow.names = TRUE,
    \tcol.names = TRUE
    )'

  'remove all everything {base}':
    prefix:'rmall()'
    body:  'rm(list = ls())'

  'remove objects {base}':
    prefix:'rm()'
    body:  'rm(${0:x})'

  'round {base}':
    prefix: 'round()'
    body: 'round(${0:x}, digits = 0)'

  'Read R Code from a File {base}':
    prefix: 'source()'
    body: 'source(file = $1)'

  'sort a vector or factor {base}':
    prefix: 'sort()'
    body: 'sort(${0:x},decreasing = FALSE)'

  'sample1 {base}':
    prefix: 'sample()'
    body: 'sample(${1:x}, ${2:size}, replace = FALSE, prob = NULL)'

  'sample2 {base}':
    prefix: 'sample()'
    body: 'sample(${1:x}, ${2:?})'

  'difference of sets {base}':
    prefix: 'setdiff()'
    body: 'setdiff(${1:x},)'

  'sequence  {base}':
    prefix: 'sequence()'
    body: 'seq(${1:from},${2:to},${3:by})'

  'set working dirc {base}':
    prefix:'setwd()'
    body:'setwd("")'

  'compare two sets {base}':
    prefix: 'setequal()'
    body: 'setequal(${1:x},)'

  'rounded as significant value {base}':
    prefix: 'signif()'
    body: 'signif(x, digits=0)'

  'sort {base}':
    prefix: 'sort()'
    body: 'sort(${1:x})'

  'return system time {base}':
    prefix: 'Sys.time()'
    body: 'Sys.time()'

  'summary {base}':
    prefix: 'summary()'
    body: 'summary(${0:x})'

  't.test {stats}':
    prefix: 't.test()'
    body: 't.test(${0:x},alternative ="two.sided",mu=)'

  't.test with details {stats}':
    prefix: 't.test()'
    body: 't.test(${0:x},y=NULL,alternative =c("two.sided","less","greater"),mu=?,paired=FALSE,var.equal=FALSE,conf.level=0.95 )'

  'return without duplicate {base}':
    prefix: 'unique()'
    body: 'unique(${1:x})'

  'scaling and cetering {base}':
    prefix: 'scale()'
    body: 'scale(${1:x})'

  'build a contingency table {base}':
    prefix: 'table()'
    body: 'table(${1:x},)'

  'union of sets {base}':
    prefix: 'union(x, y)'
    body: 'union(${1:x},)'

  'variance {stats}':
    prefix: 'var()'
    body: 'var(${1:x})'

  'while Loop {base}':
    prefix: 'while'
    body: """
    \twhile (${1:?}){
    \t}
    \t"""

  'write {base}':
    prefix: 'write()'
    body: 'write(${1:x},file="")'

  'write.csv {base}':
    prefix: 'write.csv()'
    body: 'write.csv(${1:x},file=".csv",row.names=TRUE,col.names=TRUE)'

  'write.table {base}':
    prefix: 'write.table()'
    body: 'write.table(${1:x},file=".csv",row.names=TRUE,col.names=TRUE)'

  'log {base}':
    prefix: 'log()'
    body: 'log(${1:x})'

  'log with base {base}':
    prefix: 'logb()'
    body: 'logb(${1:x},base=exp(1))'

  'log10 {base}':
    prefix: 'log10()'
    body: 'log10(${1:x})'

  'exponential {base}':
    prefix: 'exp()'
    body: 'exp(${1:x})'

  'cos {base}':
    prefix: 'cos()'
    body: 'cos(${1:x})'

  'sin {base}':
    prefix: 'sin()'
    body: 'sin(${1:x})'

  'tan {base}':
    prefix: 'tan()'
    body: 'tan(${1:x})'

  'arc-cos {base}':
    prefix: 'acos()'
    body: 'acos(${1:x})'

  'arc-sin {base}':
    prefix: 'asin()'
    body: 'asin(${1:x})'

  'arc-tan {base}':
    prefix: 'atan()'
    body: 'atan(${1:x})'

  'hyperbolic  cos{base}':
    prefix: 'cosh()'
    body: 'cosh(${1:x})'

  'hyperbolic  sin{base}':
    prefix: 'sinh()'
    body: 'sinh(${1:x})'

  'hyperbolic  tan{base}':
    prefix: 'tanh()'
    body: 'tanh(${1:x})'

  'arc cosh {base}':
    prefix: 'acosh()'
    body: 'acosh(${1:x})'

  'arc-sinh {base}':
    prefix: 'asinh()'
    body: 'asinh(${1:x})'

  'arc-tanh {base}':
    prefix: 'atanh()'
    body: 'atanh(${1:x})'


#------------------------------------------------------------------------------------------------------------------------------
#
# 8888888888 888b    888 8888888b.
# 888        8888b   888 888  "Y88b
# 888        88888b  888 888    888
# 8888888    888Y88b 888 888    888
# 888        888 Y88b888 888    888
# 888        888  Y88888 888    888
# 888        888   Y8888 888  .d88P
# 8888888888 888    Y888 8888888P"
#
#------------------------------------------------------------------------------------------------------------------------------
