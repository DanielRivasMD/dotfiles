
[scripts.cChrome]
alias = 'cChrome'
command = '''for i in $(procs 'Google Chrome' --or chromedriver | awk 'NR > 2 {print $1}' ); do kill $i; done'''
description = 'stop all Chrome jobs'
tags = ['shell']

[scripts.cFire]
alias = 'cFire'
command = '''for i in $(procs Firefox | awk 'NR > 2 {print $1}' ); do kill $i; done'''
description = 'stop all Firefox jobs'
tags = ['shell']

[scripts.dc]
alias = 'dc'
command = 'fd . --type=d --max-depth=1 | /usr/bin/wc -l'
description = 'count directories in present address'
tags = ['shell']

[scripts.fc]
alias = 'fc'
command = 'fd . --type=f --max-depth=1 | /usr/bin/wc -l'
description = 'count files in present address'
tags = ['shell']

[scripts.cd]
alias = 'cd'
command = '''
#!/bin/zsh
  cheat -d | \
  awk '
  BEGIN{
    gray = "\033[1;30m"
    cyan = "\033[0;36m"
  }
  {
    printf "%s ", gray "|";
    printf "%-30s", cyan $1;
    printf "%s ", gray "|";
    printf "%-51s ", $2;
    printf "%1s\n", "|";
  }
  '
'''
description = 'list cheat directories'
tags = ['alias']

[scripts.ch]
alias = 'ch'
command = '''
#!/bin/zsh
cheat -l "$1" | \
awk '
BEGIN{

  # colors
  red = "\033[1;31m"
  gray = "\033[1;30m"
  blue = "\033[1;34m"
  yellow = "\033[1;33m"
  cyan = "\033[0;36m"
  green = "\033[0;32m"
}

{
  if ( NR == 1 )
  {

    # decompose printf
    printf "%s ", gray "|";
    printf "%-40s", blue $1;
    printf "%s", gray "|";
    printf "%49s ", blue $3;
    printf "%s\n", gray "|";

    for ( m = 1; m <= 80; m++ )
    {
      printf "%s", gray "‡";
    }
    print ""
  }
else
  {

    # replicate as header
    printf "%s ", gray "|";
    printf "%-40s", yellow $1;
    printf "%s", gray "|";
    printf "%49s ", cyan $3;
    printf "%s\n", gray "|";
  }
}
'
'''
description = 'list available cheats'
tags = ['cheat']

[scripts.cpu]
alias = 'cpu'
command = 'procs --sortd CPU --watch'
description = 'watch resources usage CPU-sorted'
tags = ['shell']

[scripts.git]
alias = 'git'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}

if [[ $(pwd) == ${HOME} ]]
then

  git dot status --short
  source ${PIER}break_single_line.sh ${MANWIDTH}

  git dot stash list
  source ${PIER}break_double_line.sh ${MANWIDTH}

  git dot lk -10
  source ${PIER}break_single_line.sh ${MANWIDTH}

else

  git status --short
  source ${PIER}break_single_line.sh ${MANWIDTH}

  git stash list
  source ${PIER}break_double_line.sh ${MANWIDTH}

  git lk -10
  source ${PIER}break_single_line.sh ${MANWIDTH}

fi
'''
description = 'all-round git status'
tags = ['git']

[scripts.dot]
alias = 'dot'
command = '''
#!/bin/zsh
lvl=$1;
git dot ls  | \
awk -v lvl=$lvl '
BEGIN{
  FS = "/";
  # colors
  gray = "\033[1;30m"
  blue = "\033[1;34m"
  yellow = "\033[1;33m"
  ( lvl == "" ) ? level = 3 : level = lvl;
}

{
  if ( $2 == "cheat" ) {
    next;
  }
  if ( NF == 1 ) {
    printf "%s\n", blue $1;
  } else {
    if ( dirArr1[$1] == "" ) {
      printf "%s\n", yellow $1;
      dirArr1[$1]=$1;
    }
    if ( level > 1 ) {
      if ( NF == 2 ) {
        printf "%s%s\n", gray "--", blue $2;
      } else {
        if ( dirArr2[$2] == "" ) {
          printf "%s%s\n", gray "--", yellow $2;
          dirArr2[$2]=$2;
        }
        if ( ( level > 2 ) && ( NF == 3 ) ) {
          printf "%s%s\n", gray "----", blue $3;
        }
      }
    }
  }
}
' | bat
source ${PIER}break_single_line.sh ${MANWIDTH}
'''
description = 'list all current files under dotfiles repository'
tags = ['git']

[scripts.atomDot]
alias = 'atomDot'
command = '''
#!/bin/zsh
atom $( git dot ls | \
awk '
BEGIN{
  FS = "/";
  ORS = " ";
  level = 1;
}

{
  if ( $2 == "cheat" ) {
    next;
  }
  if ( NF == 1 ) {
    print $1;
  } else {
    if ( dirArr1[$1] == "" ) {
      print $1;
      dirArr1[$1]=$1;
    }
  }
}
' )
'''
description = 'dynamically atomize dotfiles repository. Use with caution'
tags = ['git']

[scripts.gt]
alias = 'gt'
command = '''
#!/bin/zsh
directory="/Users/drivas/.archive/pier/"
case "$1" in
1)  bat -l "Git Config" ${HOME}/.gitconfig.d/alias_one_letter
    ;;
2)  bat -l "Git Config" ${HOME}/.gitconfig.d/alias_two_letter
    ;;
*)  bat -l "Git Config" ${HOME}/.gitconfig.d/functions
    ;;
esac
'''
description = 'list git shortcuts'
tags = ['git']

[scripts.kal]
alias = 'kal'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
khal calendar
source ${PIER}break_single_line.sh ${MANWIDTH}
'''
description = 'all calendars'
tags = ['khal']

[scripts.kals]
alias = 'kals'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
khal list \
  -f "{calendar-color}[{start-time}-{end-time}]  {title}{description-separator}{description}  ‹{location}›  «{categories}»" \
  -d SuperRugby \
  -d Astronomy
source ${PIER}break_single_line.sh ${MANWIDTH}
'''
description = 'list calendars'
tags = ['khal']

[scripts.kastro]
alias = 'kastro'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
khal calendar \
  --include-calendar Astronomy
source ${PIER}break_single_line.sh ${MANWIDTH}
'''
description = 'astronomy calendar'
tags = ['khal']

[scripts.kaw]
alias = 'kaw'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
khal calendar \
  -f "{calendar-color}[{start-time}-{end-time}]  {title}{description-separator}{description}  ‹{location}›  «{categories}»" \
  -d SuperRugby \
  -d Astronomy
source ${PIER}break_single_line.sh ${MANWIDTH}
'''
description = 'work calendar'
tags = ['khal']

[scripts.krugby]
alias = 'krugby'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
khal calendar \
  --include-calendar SuperRugby
source ${PIER}break_single_line.sh ${MANWIDTH}
'''
description = 'SuperRugby calendar'
tags = ['khal']

[scripts.path]
alias = 'path'
command = '''
echo $PATH | xsv flatten -d ":" -n
'''
description = 'display PATH'
tags = ['shell']

[scripts.sftp-bianca]
alias = 'sftp-bianca'
command = '''
sftp -q drivas-sens2019016@bianca-sftp.uppmax.uu.se
'''
description = 'sftp to bianca sens2019016'
tags = ['remote']

[scripts.sftp-uppmax]
alias = 'sftp-uppmax'
command = 'sftp drivas@rackham.uppmax.uu.se'
description = 'sftp to Uppmax Rackham'
tags = ['remote']

[scripts.ssh-bianca]
alias = 'ssh-bianca'
command = 'ssh drivas-sens2019016@bianca.uppmax.uu.se'
description = 'ssh to bianca sens2019016'
tags = ['remote']

[scripts.ssh-uppmax]
alias = 'ssh-uppmax'
command = 'ssh drivas@rackham.uppmax.uu.se'
description = 'ssh to Uppmax Rackham'
tags = ['remote']

[scripts.xa]
alias = 'xa'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --git \
    --header \
    --sort=accessed \
    --group \
    --all \
    --time accessed
else
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --header \
    --sort=accessed \
    --group \
    --all \
    --time accessed
fi
'''

description = 'list files by accessed time'
tags = ['exa']

[scripts.xbs]
alias = 'xbs'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long  \
    --classify  \
    --links  \
    --git  \
    --header  \
    --sort=newest  \
    --group \
    --all
else
  $(which exa) \
    --long  \
    --classify  \
    --links  \
    --header  \
    --sort=newest  \
    --group \
    --all
fi
'''
description = 'list all files without clusters'
tags = ['exa']

[scripts.xc]
alias = 'xc'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --git \
    --header \
    --sort=created \
    --group \
    --all \
    --time created
else
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --header \
    --sort=created \
    --group \
    --all \
    --time created
fi
'''
description = 'list files by created time'
tags = ['exa']

[scripts.xd]
alias = 'xd'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long  \
    --only-dirs  \
    --classify  \
    --links  \
    --git  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
else
  $(which exa) \
    --long  \
    --only-dirs  \
    --classify  \
    --links  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
fi
'''
description = 'list directory tree'
tags = ['exa']

[scripts.xt]
alias = 'xt'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh ${MANWIDTH}
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long  \
    --group-directories-first  \
    --classify  \
    --links  \
    --git  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
else
  $(which exa) \
    --long  \
    --group-directories-first  \
    --classify  \
    --links  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
fi
'''
description = 'list file tree'
tags = ['exa']

[default]
