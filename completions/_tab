# Zsh completion for 'tab'

_tab_cobra_util_completion() {
    local dir=~/.tabularasa/cobraUtil/
    local -a files

    # Check if the directory exists
    if [[ -d "$dir" ]]; then
        # List files, remove the .go suffix, and add them to the array
        files=("${(@f)$(ls "$dir" | sed -e 's/\.go$//')}")
    fi

    # Provide the file list as completions
    compadd "${files[@]}"
}

_tab() {
    if [[ $words[2] == "cobra" && $words[3] == "util" && $words[4] == "--util" ]]; then
        _tab_cobra_util_completion
        return
    fi

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16
    local shellCompDirectiveKeepOrder=32

    local lastParam lastChar flagPrefix requestComp out directive comp lastComp noSpace keepOrder
    local -a completions

    # Debugging function
    __tab_debug() {
        local file="$BASH_COMP_DEBUG_FILE"
        if [[ -n ${file} ]]; then
            echo "$*" >> "${file}"
        fi
    }

    __tab_debug "\n========= starting completion logic for 'tab' =========="
    __tab_debug "CURRENT: ${CURRENT}, words[*]: ${words[*]}"

    # Truncate the command line based on $CURRENT location
    words=("${=words[1,CURRENT]}")
    __tab_debug "Truncated words[*]: ${words[*]}"

    lastParam=${words[-1]}
    lastChar=${lastParam[-1]}
    __tab_debug "lastParam: ${lastParam}, lastChar: ${lastChar}"

    # Handle flags with '='
    setopt local_options BASH_REMATCH
    if [[ "${lastParam}" =~ '-.*=' ]]; then
        flagPrefix="-P ${BASH_REMATCH}"
    fi

    # Main command for obtaining completions
    requestComp="tab __complete ${words[2,-1]}"
    if [ "${lastChar}" = "" ]; then
        __tab_debug "Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __tab_debug "About to call: eval ${requestComp}"
    out=$(eval ${requestComp} 2>/dev/null)
    __tab_debug "completion output: ${out}"

    # Extract directive and completions
    local lastLine
    while IFS='\n' read -r line; do
        lastLine=${line}
    done < <(printf "%s\n" "${out[@]}")
    __tab_debug "last line: ${lastLine}"

    if [ "${lastLine[1]}" = : ]; then
        directive=${lastLine[2,-1]}
        local suffix
        (( suffix=${#lastLine}+2))
        out=${out[1,-$suffix]}
    else
        directive=0
    fi

    __tab_debug "directive: ${directive}"
    __tab_debug "completions: ${out}"
    __tab_debug "flagPrefix: ${flagPrefix}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        __tab_debug "Completion received error. Ignoring completions."
        return
    fi

    local activeHelpMarker="_activeHelp_ "
    local endIndex=${#activeHelpMarker}
    local startIndex=$((${#activeHelpMarker}+1))
    local hasActiveHelp=0
    while IFS='\n' read -r comp; do
        if [ "${comp[1,$endIndex]}" = "$activeHelpMarker" ];then
            __tab_debug "ActiveHelp found: $comp"
            comp="${comp[$startIndex,-1]}"
            if [ -n "$comp" ]; then
                compadd -x "${comp}"
                hasActiveHelp=1
            fi
            continue
        fi

        if [ -n "$comp" ]; then
            comp=${comp//:/\\:}
            local tab="$(printf '\t')"
            comp=${comp//$tab/:}
            completions+=${comp}
            lastComp=$comp
        fi
    done < <(printf "%s\n" "${out[@]}")

    if [ $hasActiveHelp -eq 1 ]; then
        if [ ${#completions[@]} -ne 0 ] || [ $((directive & shellCompDirectiveNoFileComp)) -eq 0 ]; then
            compadd -x "--"
            hasActiveHelp=0
        fi
    fi

    if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
        noSpace="-S ''"
    fi

    if [ $((directive & shellCompDirectiveKeepOrder)) -ne 0 ]; then
        keepOrder="-V"
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        local filteringCmd='_files'
        for filter in ${completions[@]}; do
            if [ ${filter[1]} != '*' ]; then
                filter="\*.$filter"
            fi
            filteringCmd+=" -g $filter"
        done
        filteringCmd+=" ${flagPrefix}"
        _arguments '*:filename:'"$filteringCmd"
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        local subdir="${completions[1]}"
        if [ -n "$subdir" ]; then
            pushd "${subdir}" >/dev/null 2>&1
        fi
        _arguments '*:dirname:_files -/'" ${flagPrefix}"
        if [ -n "$subdir" ]; then
            popd >/dev/null 2>&1
        fi
    else
        if eval _describe $keepOrder "completions" completions $flagPrefix $noSpace; then
            return 0
        else
            if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
                return 1
            else
                _arguments '*:filename:_files'" ${flagPrefix}"
            fi
        fi
    fi
}

# Bind the completion function to the 'tab' command
compdef _tab tab

