#!/usr/bin/env bash
#
# julia-sys: wrapper for Julia with a precompiled sysimage (global environment)
#
# Usage:
#   julia-sys [--verbose] lsp
#   julia-sys [--verbose] formatter
#   julia-sys [--verbose] rebuild

####################################################################################################
# Option parsing
####################################################################################################

VERBOSE=0
if [[ "$1" == "--verbose" || "$1" == "-v" ]]; then
    VERBOSE=1
    shift
fi

log() {
    if [ "$VERBOSE" -eq 1 ]; then
        echo "$@"
    fi
}

####################################################################################################
# Detect Julia version
####################################################################################################

find_project_root() {
    local dir="$PWD"
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/Project.toml" ]; then
            echo "$dir"
            return 0
        fi
        dir=$(dirname "$dir")
    done
    return 1
}

PROJECT_ROOT=$(find_project_root)

if [ -n "$PROJECT_ROOT" ]; then
    JULIA_VERSION=$(cd "$PROJECT_ROOT" && julia --startup-file=no --history-file=no -e '
        using TOML
        try
            if isfile("Manifest.toml")
                manifest = TOML.parsefile("Manifest.toml")
                ver = get(manifest, "julia_version", nothing)
                if ver !== nothing
                    println(ver); exit()
                end
            end
            if isfile("Project.toml")
                proj = TOML.parsefile("Project.toml")
                ver = get(get(proj, "compat", Dict()), "julia", nothing)
                if ver !== nothing
                    println(ver); exit()
                end
            end
            println("1.8")
        catch
            println("1.8")
        end
    ')
else
    JULIA_VERSION="1.8"
fi

JULIA_BIN=(julia +$JULIA_VERSION)
SYSIMG="$HOME/.julia/sysimages/julia-$JULIA_VERSION-formatter.so"

####################################################################################################
# Build sysimage
####################################################################################################

build_sysimage() {
    log "Building global sysimage at $SYSIMG for Julia $JULIA_VERSION..."
    "${JULIA_BIN[@]}" --startup-file=no -e "
        using PackageCompiler
        create_sysimage([:JuliaFormatter, :LanguageServer, :SymbolServer, :StaticLint];
            sysimage_path=\"$SYSIMG\")"

    log "Ensuring and precompiling LSP packages in global env..."
    "${JULIA_BIN[@]}" --project="@v$JULIA_VERSION" --startup-file=no -e '
        using Pkg
        Pkg.add(["LanguageServer", "SymbolServer", "StaticLint", "JuliaFormatter"])
        Pkg.update(["LanguageServer", "SymbolServer", "StaticLint", "JuliaFormatter"])
        using LanguageServer, SymbolServer, StaticLint, JuliaFormatter
    '
}

####################################################################################################
# Dispatch
####################################################################################################

case "$1" in
  rebuild)
    log "Rebuilding sysimage: $SYSIMG"
    rm -f "$SYSIMG"
    build_sysimage
    ;;
  lsp)
    [ -f "$SYSIMG" ] || build_sysimage
    log "Starting LSP with sysimage: $SYSIMG"
    exec "${JULIA_BIN[@]}" -J"$SYSIMG" \
      --startup-file=no --history-file=no --quiet -e "
        using LanguageServer, SymbolServer
        depot = get(ENV, \"JULIA_DEPOT_PATH\", \"\")
        project = Base.current_project()
        server = LanguageServer.LanguageServerInstance(stdin, stdout, project, depot)
        run(server)
      "
    ;;
  formatter)
    [ -f "$SYSIMG" ] || build_sysimage
    log "Running formatter with sysimage: $SYSIMG"
    exec "${JULIA_BIN[@]}" -J"$SYSIMG" \
      --startup-file=no --history-file=no --quiet --project -e \
      'using JuliaFormatter; print(format_text(read(stdin, String); indent=2))'
    ;;
  *)
    echo "Usage:"
    echo "  julia-sys [--verbose] lsp"
    echo "  julia-sys [--verbose] formatter"
    echo "  julia-sys [--verbose] rebuild"
    exit 1
    ;;
esac

####################################################################################################
