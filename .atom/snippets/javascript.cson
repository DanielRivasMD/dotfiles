
#------------------------------------------------------------------------------------------------------------------------------
#
#  888888        d8888 888     888     d8888  .d8888b.   .d8888b.  8888888b.  8888888 8888888b. 88888888888
#    "88b       d88888 888     888    d88888 d88P  Y88b d88P  Y88b 888   Y88b   888   888   Y88b    888
#     888      d88P888 888     888   d88P888 Y88b.      888    888 888    888   888   888    888    888
#     888     d88P 888 Y88b   d88P  d88P 888  "Y888b.   888        888   d88P   888   888   d88P    888
#     888    d88P  888  Y88b d88P  d88P  888     "Y88b. 888        8888888P"    888   8888888P"     888
#     888   d88P   888   Y88o88P  d88P   888       "888 888    888 888 T88b     888   888           888
#     88P  d8888888888    Y888P  d8888888888 Y88b  d88P Y88b  d88P 888  T88b    888   888           888
#     888 d88P     888     Y8P  d88P     888  "Y8888P"   "Y8888P"  888   T88b 8888888 888           888
#   .d88P
# .d88P"
# 888P"
#
#------------------------------------------------------------------------------------------------------------------------------


".source.js, .source.jsx, .source.ts, .source.js-semantic":


  "describe":
    prefix: "desc"
    body: """
      describe('${1:description}', function() {
      \t${0:// body...}
      });
      """

  "it asynchronous":
    prefix: "ita"
    body: """
    it('${1:description}', function(done) {
    \t${0:// body...}
    });
    """

  "it pending":
    prefix: "itp"
    body: """
    it('${1:description}');
    """

  "it synchronous":
    prefix: "its"
    body: """
    it('${1:description}', function() {
    \t${0:// body...}
    });
    """

  "console.dir":
    prefix: "cd"
    body: "console.dir(${1:obj});"

  "console.error":
    prefix: "ce"
    body: "console.error(${1:obj});"

  "console.info":
    prefix: "ci"
    body: "console.info(${1:obj});"

  "console.log":
    prefix: "cl"
    body: "console.log(${1:obj});"

  "console.warn":
    prefix: "cw"
    body: "console.warn(${1:obj});"

  "addEventListener":
    prefix: "ae"
    body: """
    ${1:document}.addEventListener('${2:event}', function(e) {
    \t${0:// body...}
    });
    """

  "getAttribute":
    prefix: "ga"
    body: """
    ${1:document}.getAttribute('${2:attr}');
    """

  "removeAttribute":
    prefix: "ra"
    body: """
    ${1:document}.removeAttribute('${2:attr}');
    """

  "setAttribute":
    prefix: "sa"
    body: """
    ${1:document}.setAttribute('${2:attr}', ${3:value});
    """

  "appendChild":
    prefix: "ac"
    body: """
    ${1:document}.appendChild(${2:elem});
    """

  "removeChild":
    prefix: "rc"
    body: """
    ${1:document}.removeChild(${2:elem});
    """

  "classList.add":
    prefix: "ca"
    body: """
    ${1:document}.classList.add('${2:class}');
    """

  "classList.remove":
    prefix: "cr"
    body: """
    ${1:document}.classList.remove('${2:class}');
    """

  "classList.toggle":
    prefix: "ct"
    body: """
    ${1:document}.classList.toggle('${2:class}');
    """

  "createDocumentFragment":
    prefix: "cdf"
    body: """
    ${1:document}.createDocumentFragment();
    """

  "createElement":
    prefix: "cel"
    body: """
    ${1:document}.createElement(${2:elem});
    """

  "getElementsByClassName":
    prefix: "gc"
    body: """
    ${1:document}.getElementsByClassName('${2:class}');
    """

  "getElementById":
    prefix: "gi"
    body: """
    ${1:document}.getElementById('${2:id}');
    """

  "getElementsByTagName":
    prefix: "gt"
    body: """
    ${1:document}.getElementsByTagName('${2:tag}');
    """

  "innerHTML":
    prefix: "ih"
    body: """
    ${1:document}.innerHTML = '${2:elem}';
    """

  "querySelector":
    prefix: "qs"
    body: """
    ${1:document}.querySelector('${2:selector}');
    """

  "querySelectorAll":
    prefix: "qsa"
    body: """
    ${1:document}.querySelectorAll('${2:selector}');
    """

  "textContent":
    prefix: "tc"
    body: """
    ${1:document}.textContent = '${2:content}';
    """

  "forEach":
    prefix: "fe"
    body: """
    ${1:myArray}.forEach(function(${2:elem}) {
    \t${0:// body...}
    });
    """

  "for in":
    prefix: "fi"
    body: """
    for (${1:prop} in ${2:obj}) {
    \tif (${2:obj}.hasOwnProperty(${1:prop})) {
    \t\t${0:// body...}
    \t}
    }
    """

  "anonymous function":
    prefix: "afn"
    body: """
    function(${1:arguments}) {
    \t${0:// body...}
    }
    """

  "function apply":
    prefix: "apply"
    body: """
    ${1:methodName}.apply(${2:context}, [${3:arguments}])
    """

  "function call":
    prefix: "call"
    body: """
    ${1:methodName}.call(${2:context}, ${3:arguments})
    """

  "immediately-invoked function expression":
    prefix: "iife"
    body: """
    (function(${1:window}, ${2:document}) {
    \t${0:// body...}
    })(${1:window}, ${2:document});
    """

  "function as a property of an object":
    prefix: "ofn"
    body: """
    ${1:functionName}: function(${2:arguments}) {
    \t${3:// body...}
    }
    """

  "prototype":
    prefix: "pr"
    body: """
    ${1:ClassName}.prototype.${2:methodName} = function(${3:arguments}) {
    \t${0:// body...}
    }
    """

  "function":
    prefix: "fn"
    body: """
    function ${1:methodName} (${2:arguments}) {
    \t${0:// body...}
    }
    """

  "JSON.parse":
    prefix: "jp"
    body: "JSON.parse(${1:obj});"

  "JSON.stringify":
    prefix: "js"
    body: "JSON.stringify(${1:obj});"

  "alert":
    prefix: "al"
    body: """
    alert('${1:msg}');
    """

  "confirm":
    prefix: "co"
    body: """
    confirm('${1:msg}');
    """

  "debugger":
    prefix: "de"
    body: """
    debugger;
    """

  "prompt":
    prefix: "pm"
    body: """
    prompt('${1:msg}');
    """

  "use strict":
    prefix: "us"
    body: """
    'use strict';
    """

  "assert.deepEqual":
    prefix: "asd"
    body: """
    assert.deepEqual(${1:actual}, ${2:expected});
    """

  "assert.equal":
    prefix: "ase"
    body: """
    assert.equal(${1:actual}, ${2:expected});
    """

  "assert.notEqual":
    prefix: "asn"
    body: """
    assert.notEqual(${1:actual}, ${2:expected});
    """

  "module.exports":
    prefix: "me"
    body: """
    module.exports = ${1:name};
    """

  "process.exit":
    prefix: "pe"
    body: """
    process.exit(${1:code});
    """

  "require":
    prefix: "re"
    body: """
    require('${1:module}');
    """

  "setInterval":
    prefix: "si"
    body: """
    setInterval(function() {
    \t${0:// body...}
    }, ${1:delay});
    """

  "setTimeout":
    prefix: "st"
    body: """
    setTimeout(function() {
    \t${0:// body...}
    }, ${1:delay});
    """


#------------------------------------------------------------------------------------------------------------------------------
#
# 8888888888 888b    888 8888888b.
# 888        8888b   888 888  "Y88b
# 888        88888b  888 888    888
# 8888888    888Y88b 888 888    888
# 888        888 Y88b888 888    888
# 888        888  Y88888 888    888
# 888        888   Y8888 888  .d88P
# 8888888888 888    Y888 8888888P"
#
#------------------------------------------------------------------------------------------------------------------------------
