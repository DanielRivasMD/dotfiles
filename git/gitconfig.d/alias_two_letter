[alias]

  #####
  ## Two-letter
  #####

  ## add just the files in the local directory that are updated.
  ## au = add --update .

  # add by patch then commit - looks at each change, and asks if we want to put it in the repo, then commits.
  ac = !"git add --patch; git commit"

  # add by patch - looks at each change, and asks if we want to put it in the repo.
  ap = !"clear && git add --patch"

  # add interactive.
  ai = !"clear && git add --interactive"

  # branch - edit the description
  be = branch --edit-description

  ## branch - list, create, or delete branches
  ## br = branch

  # branch and only list branches whose tips are reachable from the specified commit (HEAD if not specified).
  brm = branch --merged

  # branch and only list branches whose tips are not reachable from the specified commit (HEAD if not specified).
  brnm = branch --no-merged

  # commit - amend the tip of the current branch rather than creating a new commit.
  ca = commit --amend

  # commit interacively
  ci = !"clear && git commit --interactive"

  # commit with a message
  cm = commit --message

  ## checkout - update the working tree to match a branch or paths.
  ## co = checkout

  # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
  cp = cherry-pick

  # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
  cp-nx = cherry-pick --no-commit -x

  # diff - show changes not yet staged
  dc = diff --cached

  # diff - changes about to be commited
  ds = diff --staged

  # diff - show changes but by word, not line
  dw = diff --word-diff

  # log with a text-based graphical representation of the commit history.
  lg = !"clear && git log --oneline --decorate --all --graph"

  # log with one line per item.
  lo = !"clear && git log --oneline"

  # log with patch generation.
  lp = log --patch

  # log with items appearing in topological order, i.e. descendant commits are shown before their parents.
  lt = log --topo-order

  # ls-files - show information about files in the index and the working tree; like Unix "ls" command.
  ls = ls-files

  # ls-ignored -  list files that git has ignored.
  ls-ignored = ls-files --others --i --exclude-standard

  # merge but without autocommit, and with a commit even if the merge resolved as a fast-forward.
  me = merge --no-commit --no-ff

  # reflog - reference log that manages when tips of branches are updated.
  rl = reflog

  ## remote - manage set of tracked repositories.
  ## rr = remote

  # remote show - gives some information about the remote <name>.
  rrs = remote show

  # remote update - fetch updates for a named set of remotes in the repository as defined by remotes.
  rru = remote update

  # remote prune - deletes all stale remote-tracking branches under <name>.
  rrp = remote prune

  # revert - undo the changes from some existing commits
  rv = revert

  # revert without autocommit; useful when you're reverting more than one commits' effect to your index in a row.
  rvnc = revert --no-commit

  # show-branch - print a list of branches and their commits.
  sb = show-branch

  # submodule - enables foreign repositories to be embedded within a dedicated subdirectory of the source tree.
  sm = submodule

  # submodule with initialize, update, and recursive; this is useful to bring a submodule fully up to date.
  smu = submodule update --init --recursive

  # status - short summary instead of full details.
  ss = status --short

  # status - show the working tree differences.
  sv = status --verbose

  # log key - our favorite way to show our key performance indicators, i.e. our most useful summary.
  lk = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %C(dim white)%cn%Creset'
