
[scripts.archive]
alias = 'archive'
command = '''rga "$1" | awk 'BEGIN{FS=":"} {print $1}' | runiq -'''
description = 'search the archive for pattern'
tags = ['shell']

[scripts.cChrome]
alias = 'cChrome'
command = '''for i in $(procs 'Google Chrome' --or chromedriver | awk 'NR > 2 {print $1}' ); do kill $i; done'''
description = 'stop all Chrome jobs'
tags = ['shell']

[scripts.cFire]
alias = 'cFire'
command = '''for i in $(procs Firefox | awk 'NR > 2 {print $1}' ); do kill $i; done'''
description = 'stop all Firefox jobs'
tags = ['shell']

[scripts.cAtom]
alias = 'cAtom'
command = '''for i in $(procs Atom | awk 'NR > 2 {print $1}' ); do kill $i; done'''
description = 'stop all Atom jobs'
tags = ['shell']

[scripts.dc]
alias = 'dc'
command = 'fd . --type=d --max-depth=1 | /usr/bin/wc -l'
description = 'count directories in present address'
tags = ['shell']

[scripts.fc]
alias = 'fc'
command = 'fd . --type=f --max-depth=1 | /usr/bin/wc -l'
description = 'count files in present address'
tags = ['shell']

[scripts.cd]
alias = 'cd'
command = '''
#!/bin/zsh
  cheat -d | \
  awk '
  BEGIN{
    gray = "\033[1;30m"
    cyan = "\033[0;36m"
  }
  {
    printf "%s ", gray "|";
    printf "%-30s", cyan $1;
    printf "%s ", gray "|";
    printf "%-51s ", $2;
    printf "%1s\n", "|";
  }
  '
'''
description = 'list cheat directories'
tags = ['alias']

[scripts.ch]
alias = 'ch'
command = '''
#!/bin/zsh
cheat -l "$1" | \
awk '
BEGIN{

  # colors
  red = "\033[1;31m"
  gray = "\033[1;30m"
  blue = "\033[1;34m"
  yellow = "\033[1;33m"
  cyan = "\033[0;36m"
  green = "\033[0;32m"
}

{
  if ( NR == 1 )
  {

    # decompose printf
    printf "%s ", gray "|";
    printf "%-40s", blue $1;
    printf "%s", gray "|";
    printf "%49s ", blue $3;
    printf "%s\n", gray "|";

    for ( m = 1; m <= 80; m++ )
    {
      printf "%s", gray "‡";
    }
    print ""
  }
else
  {

    # replicate as header
    printf "%s ", gray "|";
    printf "%-40s", yellow $1;
    printf "%s", gray "|";
    printf "%49s ", cyan $3;
    printf "%s\n", gray "|";
  }
}
'
'''
description = 'list available cheats'
tags = ['cheat']

[scripts.cpu]
alias = 'cpu'
command = 'procs --sortd CPU --watch'
description = 'watch resources usage CPU-sorted'
tags = ['shell']

[scripts.git]
alias = 'git'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh $COLUMNS

git status --short
source ${PIER}break_single_line.sh $COLUMNS

git stash list
source ${PIER}break_double_line.sh $COLUMNS

git lk -10
source ${PIER}break_single_line.sh  $COLUMNS
'''
description = 'all-round git status'
tags = ['git']

[scripts.gt]
alias = 'gt'
command = '''
#!/bin/zsh
directory="/Users/drivas/.archive/pier/"
case "$1" in
1)  bat -l "Git Config" ${HOME}/.gitconfig.d/alias_one_letter
    ;;
2)  bat -l "Git Config" ${HOME}/.gitconfig.d/alias_two_letter
    ;;
*)  bat -l "Git Config" ${HOME}/.gitconfig.d/functions
    ;;
esac
'''
description = 'list git shortcuts'
tags = ['git']

[scripts.godoc]
alias = 'godoc'
command = 'godoc -http=localhost:6060; open http://localhost:6060 -a Opera'
description = 'open port for godoc'
tags = ['go']

[scripts.kal]
alias = 'kal'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
khal calendar \
  --format "{calendar-color}[{start-time}-{end-time}]  {title}{description-separator}{description}  ‹{location}›  «{categories}»"
source ${PIER}break_single_line.sh  $COLUMNS
'''
description = 'all calendars'
tags = ['khal']

[scripts.kals]
alias = 'kals'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
khal list \
  --format "{calendar-color}[{start-time}-{end-time}]  {title}{description-separator}{description}  ‹{location}›  «{categories}»" \
  --exclude-calendar SuperRugby \
  --exclude-calendar Astronomy
source ${PIER}break_single_line.sh  $COLUMNS
'''
description = 'list calendars'
tags = ['khal']

[scripts.kastro]
alias = 'kastro'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
khal calendar \
  --include-calendar Astronomy
source ${PIER}break_single_line.sh  $COLUMNS
'''
description = 'astronomy calendar'
tags = ['khal']

[scripts.kaw]
alias = 'kaw'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
khal calendar \
  --format "{calendar-color}[{start-time}-{end-time}]  {title}{description-separator}{description}  ‹{location}›  «{categories}»" \
  --exclude-calendar SuperRugby \
  --exclude-calendar Astronomy
source ${PIER}break_single_line.sh  $COLUMNS
'''
description = 'work calendar'
tags = ['khal']

[scripts.krugby]
alias = 'krugby'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
khal calendar \
  --include-calendar SuperRugby
source ${PIER}break_single_line.sh  $COLUMNS
'''
description = 'SuperRugby calendar'
tags = ['khal']

[scripts.path]
alias = 'path'
command = '''
source ${PIER}break_single_line.sh  $COLUMNS
echo $PATH | xsv flatten -d ":" -n
'''
description = 'display PATH'
tags = ['shell']

[scripts.fpath]
alias = 'fpath'
command = '''
source ${PIER}break_single_line.sh  $COLUMNS
echo $FPATH | xsv flatten -d ":" -n
'''
description = 'display fpath'
tags = ['shell']

[scripts.gopath]
alias = 'gopath'
command = '''
source ${PIER}break_single_line.sh  $COLUMNS
echo $GOPATH | xsv flatten -d ":" -n
'''
description = 'display GOPATH'
tags = ['go']

[scripts.bianca-sftp]
alias = 'bianca-sftp'
command = 'sftp -q drivas-sens2019016@bianca-sftp.uppmax.uu.se'
description = 'sftp to Bianca sens2019016'
tags = ['remote']

[scripts.bianca-ssh]
alias = 'bianca-ssh'
command = 'ssh drivas-sens2019016@bianca.uppmax.uu.se'
description = 'ssh to Bianca sens2019016'
tags = ['remote']

[scripts.magnus-sftp]
alias = 'magnus-sftp'
command = 'sftp drivas@magnus.pawsey.org.au'
description = 'sftp to Pawsey Magnus'
tags = ['remote']

[scripts.topaz-sftp]
alias = 'topaz-sftp'
command = 'sftp drivas@topaz.pawsey.org.au'
description = 'sftp to Pawsey Topaz'
tags = ['remote']

[scripts.uppmax-sftp]
alias = 'uppmax-sftp'
command = 'sftp drivas@rackham.uppmax.uu.se'
description = 'sftp to Uppmax Rackham'
tags = ['remote']

[scripts.xa]
alias = 'xa'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --git \
    --header \
    --sort=accessed \
    --group \
    --all \
    --time accessed
else
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --header \
    --sort=accessed \
    --group \
    --all \
    --time accessed
fi
'''

description = 'list files by accessed time'
tags = ['exa']

[scripts.xbs]
alias = 'xbs'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long  \
    --classify  \
    --links  \
    --git  \
    --header  \
    --sort=newest  \
    --group \
    --all
else
  $(which exa) \
    --long  \
    --classify  \
    --links  \
    --header  \
    --sort=newest  \
    --group \
    --all
fi
'''
description = 'list all files without clusters'
tags = ['exa']

[scripts.xc]
alias = 'xc'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --git \
    --header \
    --sort=created \
    --group \
    --all \
    --time created
else
  $(which exa) \
    --long \
    --group-directories-first \
    --classify \
    --links \
    --header \
    --sort=created \
    --group \
    --all \
    --time created
fi
'''
description = 'list files by created time'
tags = ['exa']

[scripts.xd]
alias = 'xd'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long  \
    --only-dirs  \
    --classify  \
    --links  \
    --git  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
else
  $(which exa) \
    --long  \
    --only-dirs  \
    --classify  \
    --links  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
fi
'''
description = 'list directory tree'
tags = ['exa']

[scripts.xt]
alias = 'xt'
command = '''
#!/bin/zsh
source ${PIER}break_single_line.sh  $COLUMNS
if [[ $HOST == "BMC-02ZX3JYMD6N" ]];
then
  $(which exa) \
    --long  \
    --group-directories-first  \
    --classify  \
    --links  \
    --git  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
else
  $(which exa) \
    --long  \
    --group-directories-first  \
    --classify  \
    --links  \
    --header  \
    --group  \
    --all \
    --tree  \
    --level 3  \
    --ignore-glob ".git|.idea"
fi
'''
description = 'list file tree'
tags = ['exa']

[scripts.rustfmt]
alias = 'rustfmt'
command = 'cp -v ${PIER}rustfmt.toml $(pwd)'
description = 'collect a template of rustfmt'
tags = ['rust']

[default]
