####################################################################################################
# theme
####################################################################################################

# theme = "adwaita-dark"
theme = "base16_transparent"
# theme = "dark_plus"
# theme = "fleet_dark"
# theme = "github_dark"
# theme = "molokai"
# theme = "snazzy"

####################################################################################################

[editor]
# line-number = "relative"
mouse = true
rulers = [80]
shell = ["zsh", "-c"]
bufferline = "always"

####################################################################################################

[editor.cursor-shape]
insert = "bar"
normal = "underline"
select = "block"

####################################################################################################

[editor.file-picker]
hidden = false

####################################################################################################

# At most one section each of 'keys.normal', 'keys.insert' and 'keys.select'
[keys.normal]
A-A = ["select_all"]  # SelectAll
# A-B = [""]  # ShellMode
A-C = ["toggle_comments"]  # lua:comment.comment
A-D = ["extend_to_line_bounds", "yank", "paste_after"]  # DuplicateLine
# A-E = [""]  #
A-F = ["rsearch"]  # Find
A-G = ["goto_last_line"]  # CursorEnd               // mapped -> `cmd-down`
A-H = [":hsplit-new"]  # HSplit
A-I = ["indent"]  # IndentSelection
A-J = ["extend_to_line_bounds", "delete_selection", "paste_after"]  # MoveLinesDown
A-K = ["extend_to_line_bounds", "delete_selection", "move_visual_line_up", "paste_before"]  # MoveLinesUp
A-L = ["extend_line_below"]  # SelectLine
# A-M = [""]  #
# A-N = [""]  #
A-O = ["later"]  # Redo
# A-P = [""]  #
A-Q = [":quit-all"]  # QuitAll
A-R = ["replay_macro"]  # PlayMacro
A-S = [":write-quit-all"]  # Save,QuitAll
A-T = ["file_picker"]  # AddTab,OpenFile
A-U = ["unindent"]  # OutdentSelection
A-V = [":vsplit-new"]  # VSplit
# A-W = [""]  # lua:wc.wordCount
A-X = ["extend_to_line_bounds", "delete_selection"]  # CutLine
A-Y = ["extend_to_line_bounds", "yank"]  # CopyLine
A-Z = ["wonly"]  # Unsplit

# A-a = [""]  # lua:snippets.Accept
A-b = ["move_prev_word_start"]  # WordLeft                // mapped -> `alt-left`
A-c = ["yank_joined_to_clipboard"]  # Copy
# A-d = [""]  # SpawnMultiCursor
A-e = ["no_op"]  # None                    // disabled => accent
A-f = ["move_next_word_end"]  # WordRight               // mapped -> `alt-right`
A-g = ["goto_file_start"]  # CursorStart             // mapped -> `cmd-up`
A-h = ["search_prev"]  # FindPrevious
A-i = ["no_op"]  # None                    // disabled => accent
A-j = ["copy_selection_on_next_line"]  # SpawnMultiCursorDown
A-k = ["copy_selection_on_prev_line"]  # SpawnMultiCursorUp
A-l = ["search_next"]  # FindNext
# A-m = [""]
A-n = ["no_op"]  # None                    // disabled => accent
A-o = ["earlier"]  # Undo
A-p = ["match_brackets"]  # JumpToMatchingBrace
A-q = [":quit"]  # Quit
A-r = ["record_macro"]  # ToggleMacro
A-s = [":write-quit"]  # Save,Quit
# A-t = [""]
A-u = ["no_op"]  # None                    // disabled => accent
A-v = ["paste_after"]  # Paste
A-w = [":write"]  # Save
A-x = ["delete_selection"]  # Cut
# A-y = [""]  # SkipMultiCursor
# A-z = [""]  # RemoveMultiCursor

A-down = ["goto_next_paragraph"]  # ParagraphNext
# A-left = [""]  # SelectToStartOfLine",   // mapped -> `shift-cmd-left`
# A-right = [""]  # SelectToEndOfLine",    // mapped -> `shift-cmd-right`
# AltShiftDown": "StartOfLine,SelectLine,ParagraphNext,SelectWordRight
# AltShiftLeft": "SelectWordLeft
# AltShiftRight": "SelectWordRight
# AltShiftUp": "StartOfLine,SelectLine,ParagraphPrevious,SelectWordRight
A-up = ["goto_prev_paragraph"]  # ParagraphPrevious

C-a = ["goto_line_start"]  # StartOfLine            // mapped ->
C-e = ["goto_line_end"]  # EndOfLine              // mapped ->
# C-u = [""]  # SelectToStartOfLine,Delete
# C-k = [""]  # SelectToEndOfLine,Delete
# C-w = [""]  # DeleteWordLeft
C-b = ["command_mode"]  # CommandMode            // mapped -> `alt-b`
C-f = ["search"]  # FindLiteral            // mapped -> `alt-f`
C-g = ["no_op"]  # None
C-h = ["no_op"]  # None
C-o = ["goto_previous_buffer"]  # PreviousTab            // mapped -> `alt-cmd-comma`
C-p = ["goto_next_buffer"]  # NextTab                // mapped -> `alt-cmd-period`
C-v = ["no_op"]  # None                   // mapped -> `alt-cmd-slash`
C-x = ["no_op"]  # None                   // mapped -> `enter-alt`
C-down = ["jump_view_down"]  # DiffNext
C-left = ["jump_view_left"]  # PreviousSplit
C-right = ["jump_view_right"]  # NextSplit
C-space = ["no_op"]  # None                // disabled => collision Alacritty
# C-underscore = [""]  # lua:comment.comment
C-up = ["jump_view_up"]  # DiffPrevious

A-F5 = ["increment"]
A-F6 = ["decrement"]

# Delete": "Delete
# MouseRight": "MouseMultiCursor
# "F1": "None
# F2 = ["goto_line"]
# "F3": "None
# "F4": "None
# "F5": "lua:wc.wordCount
# "F6": "None
# "F7": "None
# "F8": "None
# "F9": "None
# "F10": "None
# "F11": "None
# "F12": "None

# C-F1 = [""]  # None
# C-F2 = [":goto"]  # JumpLine              // mapped -> `enter-ctrl`
# C-F3 = [""]  # None
# C-F4 = [""]  # None
# C-F5 = [""]  # None
# C-F6 = [""]  # None
# C-F7 = [""]  # None
# C-F8 = [""]  # None
# C-F9 = [""]  # None
# C-F10 = [""]  # "None
# C-F11 = [""]  # "Autocomplete         // mapped -> `shift-space`
# C-F12 = [""]  # "None"



# "A-w" = ":w" # Maps Ctrl-s to the typable command :w which is an alias for :write (save file)
# C-o = ":open ~/.config/helix/config.toml" # Maps Ctrl-o to opening of the helix config file
a = "move_char_left" # Maps the 'a' key to the move_char_left command
w = "move_line_up" # Maps the 'w' key move_line_up
"C-S-esc" = "extend_line" # Maps Ctrl-Shift-Escape to extend_line
g = { a = "code_action" } # Maps `ga` to show possible code actions
"ret" = ["open_below", "normal_mode"]  # Maps the enter key to open_below then re-enter normal mode

# c-v = ""

# A-down = "page_down"
# A-up = "page_up"
# C-F1 = "move_next_word_end"

# C-o = ["goto_previous_buffer"]
# C-p = ["goto_next_buffer"]

# A-V = ["vsplit"]
# A-H = ["hsplit"]

[keys.insert]
# "A-x" = "normal_mode"     # Maps Alt-X to enter normal mode
j = { j = "normal_mode" } # Maps `jk` to exit insert mode
C-space = "completion"

# [keys.normal.g]
# a = "code_action" # Maps `ga` to show possible code actions

# invert `j` and `k` in view mode
[keys.normal.z]
j = "scroll_up"
k = "scroll_down"

####################################################################################################

# create a new minor mode bound to `+`
[keys.normal."+"]
j = ":run-shell-command just show"
c = ":run-shell-command cargo build"
t = ":run-shell-command cargo test"

####################################################################################################
